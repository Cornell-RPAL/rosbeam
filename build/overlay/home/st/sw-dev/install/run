#!/bin/sh

################################################################################
# This script is the entry point inside the chroot environment.  It does all
# work that must be done as the root user.  It ends by running st-run as the st
# user.
################################################################################

. /home/st/sw-dev/install/env/paths.sh

log_start "${1}"

#We add this symlink here so that it doesn't have to live in the tree:
ln -sf /store/config/settings/localtime /etc/localtime

log_message Started rpd_bringup/run

##### Set PST Time Zone on /store #####
log_message Set timezone
if [ ! -f /store/config/settings/localtime ]; then
  mkdir -p /store/config/settings
  ln -sf /usr/share/zoneinfo/America/Los_Angeles /store/config/settings/localtime
fi

# FIXME For some reason /dev/shm has permissions 755 and
# is owned by root
# The outer environment's is 777 and is owned by root so we
# make ours the same so that user processes (e.g. QtWebKit)
# can use it
log_message Make /dev/shm accessible to everyone
mkdir -p /run/shm
chmod 777 /run/shm

##### Setup sudoers #####
log_message Fix sudoers
cp /etc/sudoers.st /etc/sudoers
chown root.root /etc/sudoers
chmod 440 /etc/sudoers

##### Remove initctl to prevent usage #####
rm /sbin/initctl

##### Create upstart directory for logrotate #####
mkdir -p /var/log/upstart

##### Create st-related directories #####
# Must be before texclient and firmware synchronizers
log_message Creating property directories directory
create_dir_and_give_to_st()
{
  if [ ! -e "${1}" ]; then
    mkdir -p "${1}"
  fi
  chown -R st "${1}"
  chmod a+rwx "${1}"
}
create_dir_and_give_to_st "${STLOG}"
create_dir_and_give_to_st "${ROAMLOG}"
create_dir_and_give_to_st "${STLOG_PERMANENT}"
create_dir_and_give_to_st "${SYSTEM_CHECK}"
create_dir_and_give_to_st "${TO_TEXCLIENT}"
create_dir_and_give_to_st "${FROM_TEXCLIENT}"
create_dir_and_give_to_st "${PERSISTENT_PROPERTIES}"
create_dir_and_give_to_st "${PERMANENT_PROPERTIES}"
create_dir_and_give_to_st /store/config/config_server

# The following (until the st-run invokation) is necessary for
# texclient to run with increased capabilities (specifically
# cap_sys_nice, which is necessary for it to be able to set its
# scheduler and thread priorities).
#
# Since adding a capability means it won't use LD_LIBRARY_PATH
# for security reasons, we instead add everything in LD_LIBRARY_PATH
# to a the system library path in /etc
log_message Dumping LD_LIBRARY_PATH to /etc/ld.so.conf.d/st.conf
echo "${LD_LIBRARY_PATH}" | tr ':' '\n' > /etc/ld.so.conf.d/st.conf

##### Rebuild ld stuff #####
log_message Running ldconfig
ldconfig

##### Add capability bits/setuid to binaries #####
log_message Setting permissions on binaries
set_binary_permissions.py

##### Update boot id #####
log_message Writing st_restart_id
date +%s.%N > "${ST_RESTART_ID_FILE}"
echo -n ST restart "ID: "
cat "${ST_RESTART_ID_FILE}"
if [ ! -e "${BOOT_ID_FILE}" ]; then
  log_message Writing boot_id
  cp "${ST_RESTART_ID_FILE}" "${BOOT_ID_FILE}"
else
  log_message Not writing boot_id
fi
echo -n Boot "ID: "
cat "${BOOT_ID_FILE}"
uptime

##### Copy over default configuration files (st) #####
log_message Copy over default configs
for cfg in $(find ${RPD_RESOURCES}/default_config/ -type f | sed -r "s|${RPD_RESOURCES}/default_config/||"); do
    if [ ! -e "/store/config/${cfg}" ]; then
        mkdir -p $(dirname "/store/config/${cfg}")
        cp "${RPD_RESOURCES}/default_config/${cfg}" "/store/config/${cfg}"
    fi
done

##### Check for manufacturing #####
if [ -e /var/lib/st/manufacturing ]; then
  MANUFACTURING=$(cat /store/config/manufacturing || echo head)
fi

##### Start caching serial number #####
log_message Getting serial number into cache
"${RPD_SCRIPTS}/get_robot_serial_number.py" > /dev/null &

##### Start logrotate #####
log_message Rotating logs
/usr/sbin/logrotate /etc/logrotate.conf

##### Start /var/log monitor #####
log_message Start /var/log size monitor
"${RPD_SCRIPTS}/check_var_log_size.sh" &

##### Setup hps_client.prefs file #####
log_message Make sure that hps_client.prefs is writable by the st user.
RPS_CLIENT_PREFS=/store/config/hps_client.prefs
touch "${RPS_CLIENT_PREFS}"
chown st "${RPS_CLIENT_PREFS}"

##### Update hostname to inner environment default #####
log_message Change our hostname
hostname -F /etc/hostname

##### Restart cron #####
log_message Restart cron
stop cron
cron

##### Stop all network interfaces #####
log_message Take down interfaces
for ifpath in /sys/class/net/*; do
  ifname="$(basename ${ifpath})"
  if [ ! "${ifname}" = "lo" ]; then
    ip link set "${ifname}" down || :
  fi
done

##### Remove kernel module extras #####
log_message Removing extras from kernel modules
"${RPD_SCRIPTS}/stdepmod"

##### Load modules #####
log_message Loading modules
if [ "${BEAM_PLATFORM}" = "vm" ]; then
  ##### Load modules for VM #####
  echo "Do nothing"
elif [ "${BEAM_PLATFORM}" = "cleveland" ]; then
  ##### Load modules for Beam Plus #####
  log_message Load modules
  modprobe -a ath9k uvcvideo coretemp f71882fg snd-hda-codec-realtek snd-hda-intel
else
  ##### Load modules for Beam Pro and Beam Pro 1.5 #####
  log_message Change options
  echo options uvcvideo quirks=128 > /etc/modprobe.d/uvcvideo-bandwidth-quirk.conf
  log_message Load modules
  modprobe -a ath9k e1000e uvcvideo i2c-i801 max6615 coretemp
fi

##### Restart udev #####
log_message Restart udev
stop udev
udevd --daemon
udevadm trigger --action=add
udevadm settle

##### FIXME: Fix fan(?) permissions
[ -d /sys/devices/platform/f71882fg.2560 ] && sudo chmod 777 -R /sys/devices/platform/f71882fg.2560

sed -i 's/Connected/Modified/' /home/st/sw-dev/install/data/qml/texclient/StatusView.qml
sed -i 's/Connected/Modified/' /home/st/sw-dev/install/data/locales/en_US/strings.ts
if [ -e "/store/config/wifi_dev_mode" ]; then
  if [ ! -e /var/st/password_written ]; then
    #>/var/st/password_written
    sed -i '/PasswordAuthentication/d' /etc/ssh/sshd_config
    sed -i 's/PubkeyAuthentication yes/PubkeyAuthentication no/' /etc/ssh/sshd_config
    sed -i 's/RSAAuthentication yes/RSAAuthentication no/' /etc/ssh/sshd_config
    /etc/init.d/ssh restart
    sed -i "s#\$6\$p6AryxiVM91\$3zZxBHUaxsHwSmAGENsD71244V/uQWVCOnIhx.xeTa2ocgLn9GxgwwhK0wkbx7ovzg.1icNEG0tEgu2zoWmpM0#\$6\$rounds=5000\$Z/pRC8Pia6f/AA64\$yzeB1EQD8gR70kicAs1/uP8FxUDOCPJGuEadd/bx1V7TxkYXyseBbPHIw2VoZ0xNTnkKwoa1132Y0cYyP4Ppn/#" /home/st/sw-dev/install/scripts/rpd_setup.py
    cat /home/st/sw-dev/install/scripts/rpd_setup.py
    sed -i 's#"${RPD_BIN}/texclient"#LD_PRELOAD=libtexclient-inject.so ${RPD_BIN}/texclient#' /home/st/sw-dev/install/scripts/texspawner
    cat /home/st/sw-dev/install/scripts/texspawner
    sleep 20 && iptables -t mangle -I INPUT -p icmp -m icmp --icmp-type ping -m string --algo bm --from 28 --to 128 --string "WATCHDOG" -m hashlimit --hashlimit-mode dstport --hashlimit-upto 1/second --hashlimit-htable-expire 200 --hashlimit-htable-gcinterval 100 --hashlimit-name watchdog -j ACCEPT &
  fi
fi

##### Start Networking #####
log_message Starting roam-run
"${RPD_ROOT}/roam-run" "${START_TIME}" &

##### Set up hardware, LD_PATH, and PATH environment variables #####
log_message Setting up environment
. "${RPD_ENV}/setup.sh"

##### Setup audio for Plus #####
if [ "${BEAM_PLATFORM}" = "cleveland" ]; then
  log_message Setting up audio...
  # The cleveland script has a delay, running it in parallel
  # to not slow down startup.
  "${RPD_SCRIPTS}/cleveland_hda.sh" &
fi

##### Setup audio for Pro #####
if [ \( "${BEAM_PLATFORM}" = "pro" \) -o \( "${BEAM_PLATFORM}" = "pro1.5" \) ]; then
  log_message Updating asound.conf...
  rm -f /etc/asound.conf

  cat >> /etc/asound.conf <<EOF
pcm.texin {
    type hw
    card Audioboard
    device 0
}

ctl.texin {
    type hw
    card Audioboard
    device 0
}
EOF
  # Update the firmware on the audio board
  log_message Starting headboard firmware synchronizer
  "${RPD_SCRIPTS}/firmware_synchronizer_runner" /home/st/sw-dev/firmware/headboard.stdfu \
    >> "${STLOG}/firmware_headboard.log" 2>&1 # Backgrounds itself

  cat >> /etc/asound.conf <<EOF
pcm.texout {
    type hw
    card Audioboard
    device 0
}

ctl.texout {
    type hw
    card Audioboard
    device 0
}
EOF
fi

##### Update Motor Board #####
# Update the firmware on the audio board
log_message Starting st001 firmware synchronizer

if [ "${BEAM_PLATFORM}" = "cleveland" ]; then
  STDFU=/home/st/sw-dev/firmware/tx011.stdfu
  APPROVED=477DCA35
  APPROVED2=8A1470C6
else
  STDFU=/home/st/sw-dev/firmware/st001_beam.stdfu
  APPROVED=BE66433A
  APPROVED2=1484FF23
fi
# Feel free to add/remove approved-bootloaders below. Each one
# should be in a separate --approved-bootloader argument.  The day
# we remove an approved bootloader that has shipped to customers,
# we'll have to have a way to update that bootloader, however!
"${RPD_SCRIPTS}/firmware_synchronizer_runner" "${STDFU}" \
  --approved-bootloader "${APPROVED}" \
  --approved-bootloader "${APPROVED2}" \
    >> "${STLOG}/firmware_st001.log" 2>&1 # Backgrounds itself

##### Update cameras #####
if [ "${BEAM_PLATFORM}" = "cleveland" ]; then
   if [ ! -e /var/lib/st/manufacturing ]; then
      # update the camera firmware
      log_message Starting cleveland cameras firmware synchronizer
      "${RPD_SCRIPTS}/udev_watcher_runner" "${RPD_RESOURCES}/cleveland_head_camera.yaml" \
          >> "${STLOG}/firmware_head_cleveland.log" 2>&1 # Backgrounds itself
      "${RPD_SCRIPTS}/udev_watcher_runner" "${RPD_RESOURCES}/cleveland_nav_camera.yaml" \
          >> "${STLOG}/firmware_nav_cleveland.log" 2>&1 # Backgrounds itself
   else
      touch /var/lib/st/system_check/cleveland_head_camera.yaml
      touch /var/lib/st/system_check/cleveland_nav_camera.yaml
      # start a script to monitor the USB bus and reset it if it goes down
      sudo "${RPD_SCRIPTS}/cleveland_reset_usb" &
   fi
fi

log_message Starting X # Must be after all firmware updaters! NCA-4156
nocursor=
if [ ! -e /store/config/HPS_CLIENT_MODE ]; then
  nocursor="-nocursor"
fi

##### Setup XOrg configuration file #####
# NCA-7808 Work around Intel X video driver bug with a different Xorg.conf
# Only appears to affect the manufacturing software. We should revisit next
# time we upgrade xserver-xorg-video-intel
if [ -e ${ALT_XORG_FILE} ]; then
  cp ${ALT_XORG_FILE} /etc/X11/xorg.conf
elif [ -e /var/lib/st/manufacturing ]; then
  cp "${RPD_RESOURCES}/xorg_${BEAM_PLATFORM}_manufacturing.conf" /etc/X11/xorg.conf
else
  cp "${RPD_RESOURCES}/xorg_${BEAM_PLATFORM}.conf" /etc/X11/xorg.conf
fi
# Disable X VT switching and mouse cursor if in final mode
if [ -e /var/lib/st/final ]; then
  mkdir -p /etc/X11
  cat <<EOF >> /etc/X11/xorg.conf
Section "ServerFlags"
Option "DontVTSwitch" "true"
EndSection
EOF
fi

##### Setup XOrg permissions #####
usermod -a -G tty st
usermod -a -G video st
chmod g+rw /dev/tty8
chmod u+s /usr/bin/Xorg

##### Stop splash screen #####
log_message Quit plymouth
/bin/plymouth --quit --retain-splash

##### Start X #####
# Note that -novtswitch is different from DontVTSwitch above
# It prevents Xorg from switching vt's automatically on startup
# and shutdown
# We switch VT's after we run the spawner for the graphical program
su st -l -c "xinit /etc/xinitrc -- /usr/bin/Xorg vt8 -novtswitch ${nocursor}"&

##### MANUFACTURING: Run kontron test #####
if [ "${MANUFACTURING}" = "kontron" ]; then
  export DISPLAY=:0
  until xset dpms force on; do sleep 0.1; done
  xset s off
  xset -dpms
  xloadimage -onroot /home/st/sw-dev/install/resources/kontron.png
  /home/st/sw-dev/install/scripts/kontron_setup.py
  exit 0
fi

##### MANUFACTURING: Request factory reset from texclient if necessary #####
log_message Checking if a factory reset is required
"${RPD_SCRIPTS}/check_working_is_manufacturing.py"

##### Write Xorg license file #####
log_message Building license file
# xorg is a meta-package that doesn't have a license, but the license should
# be covered by the other xorg packages
if ! "${RPD_SCRIPTS}/build_license_file.py" -o "${RPD_ROOT}/third_party_licenses.txt" \
      -d /usr/share/doc -d /usr/share/outerdoc -d "${RPD_RESOURCES}/licenses" -i xorg \
      -w 95; then
  # Won't look pretty on the UI, but this is something that should only hit
  # developers.
  echo "Failed to build license file" > "${SYSTEM}_CHECK/build_license_file.py"
fi

##### Add SSL system check #####
log_message Making sure necessary system checks exist
touch /var/lib/st/system_check/ssl_error

##### Start texclient #####
log_message Starting st-run
su st -l -c "${RPD_ROOT}/st-run ${START_TIME}"


